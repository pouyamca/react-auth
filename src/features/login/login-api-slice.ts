// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { basicUrlFixer } from "../../app/hooks"

interface Loing {
    id: number
    loing: string
    author: string
}

interface LoingsApiResponse {
    loings: Loing[]
    total: number
    skip: number
    limit: number
}

// Define a service using a base URL and expected endpoints
export const loingsApiSlice = createApi({
    baseQuery: basicUrlFixer,
    reducerPath: "loingsApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Loings"],
    endpoints: build => ({

        getLoings: build.query<LoingsApiResponse, number>({
            query: (limit = 10) => `?limit=${limit}`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, error, id) => [{ type: "Loings", id }],
        }),
    }),
})

// Hooks are auto-generated by RTK-Query
// Same as `qLoingsApiSlice.endpoints.getLoings.useQuery`
export const { useGetLoingsQuery } = loingsApiSlice
